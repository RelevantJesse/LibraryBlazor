@page "/books"

@inject HttpClient client
@inject NavigationManager NavManager

<h3>Books</h3>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="() => AddBook()">Add Book</MudButton>

    <MudTable Items="@Books" 
            Hover="true" 
            Breakpoint="Breakpoint.Sm" 
            Loading="@_loading" 
            LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>ISBN</MudTh>
        <MudTh>Year</MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Genre</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="ISBN">@context.ISBN</MudTd>
        <MudTd DataLabel="Year">@context.Year</MudTd>
        <MudTd DataLabel="Author">@context.Author.FirstName @context.Author.LastName</MudTd>
        <MudTd DataLabel="Genre">@(context.Genre.ToString())</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto" OnClick="() => Edit(context.Id)">Edit</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Class="ml-auto" OnClick="() => Delete(context.Id)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<Book> Books;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        Books = (await client.GetFromJsonAsync<IEnumerable<Book>>("books")).ToList();
    }

    private void Edit(int id)
    {
        NavManager.NavigateTo($"books/edit/{id}");
    }

    private async void Delete(int id)
    {
        var response = await client.DeleteAsync($"books/{id}");

        var content = await response.Content.ReadAsStringAsync();

        if (bool.TryParse(content, out bool success) && success)
        {
            Books.Remove(Books.FirstOrDefault(b => b.Id == id));
        }

        StateHasChanged();
    }

    private void AddBook()
    {
        NavManager.NavigateTo($"books/add");
    }
}
